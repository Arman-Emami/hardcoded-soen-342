package com.artadvisory.dao;

import com.artadvisory.db.SQLiteConnector;
import com.artadvisory.model.ObjectOfInterest;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ObjectOfInterestDAO {

    public void insertObject(ObjectOfInterest obj) {
        String sql = """
            INSERT INTO ObjectOfInterest (
                auctionID, title, detailDescription,
                isOwnedByInstitution, canBeAuctioned, objectType
            )
            VALUES (?, ?, ?, ?, ?, ?);
        """;

        try (Connection conn = SQLiteConnector.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, obj.getAuctionID());
            pstmt.setString(2, obj.getTitle());
            pstmt.setString(3, obj.getDetailDescription());
            pstmt.setBoolean(4, obj.isOwnedByInstitution());
            pstmt.setBoolean(5, obj.canBeAuctioned());
            pstmt.setString(6, obj.getObjectType());

            pstmt.executeUpdate();
            System.out.println("‚úÖ Object inserted (ID generated by DB).");

        } catch (SQLException e) {
            System.out.println("‚ùå Failed to insert object: " + e.getMessage());
        }
    }

    public ObjectOfInterest getObjectById(int objectID) {
        String sql = "SELECT * FROM ObjectOfInterest WHERE objectOfInterestID = ?";

        try (Connection conn = SQLiteConnector.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, objectID);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return new ObjectOfInterest(
                        rs.getInt("objectOfInterestID"),
                        rs.getInt("auctionID"),
                        rs.getString("title"),
                        rs.getString("detailDescription"),
                        rs.getBoolean("isOwnedByInstitution"),
                        rs.getBoolean("canBeAuctioned"),
                        rs.getString("objectType")
                );
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Failed to retrieve object: " + e.getMessage());
        }
        return null;
    }

    public List<ObjectOfInterest> getObjectsByAuctionId(int auctionID) {
        List<ObjectOfInterest> objects = new ArrayList<>();
        String sql = "SELECT * FROM ObjectOfInterest WHERE auctionID = ?";

        try (Connection conn = SQLiteConnector.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, auctionID);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                ObjectOfInterest obj = new ObjectOfInterest(
                        rs.getInt("objectOfInterestID"),
                        rs.getInt("auctionID"),
                        rs.getString("title"),
                        rs.getString("detailDescription"),
                        rs.getBoolean("isOwnedByInstitution"),
                        rs.getBoolean("canBeAuctioned"),
                        rs.getString("objectType")
                );
                objects.add(obj);
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Failed to retrieve objects: " + e.getMessage());
        }

        return objects;
    }

    public List<ObjectOfInterest> getAllObjects() {
        List<ObjectOfInterest> objects = new ArrayList<>();
        String sql = "SELECT * FROM ObjectOfInterest";

        try (Connection conn = SQLiteConnector.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                ObjectOfInterest obj = new ObjectOfInterest(
                        rs.getInt("objectOfInterestID"),
                        rs.getInt("auctionID"),
                        rs.getString("title"),
                        rs.getString("detailDescription"),
                        rs.getBoolean("isOwnedByInstitution"),
                        rs.getBoolean("canBeAuctioned"),
                        rs.getString("objectType")
                );
                objects.add(obj);
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Failed to retrieve all objects: " + e.getMessage());
        }

        return objects;
    }

    public void deleteObjectById(int objectID) {
        String sql = "DELETE FROM ObjectOfInterest WHERE objectOfInterestID = ?";

        try (Connection conn = SQLiteConnector.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, objectID);
            pstmt.executeUpdate();
            System.out.println("üóëÔ∏è Object deleted successfully.");

        } catch (SQLException e) {
            System.out.println("‚ùå Failed to delete object: " + e.getMessage());
        }
    }

    public void updateObject(int objectID, String title, String description,
                             boolean isOwnedByInstitution, boolean canBeAuctioned, String objectType) {
        String sql = """
        UPDATE ObjectOfInterest
        SET title = ?, detailDescription = ?, isOwnedByInstitution = ?, canBeAuctioned = ?, objectType = ?
        WHERE objectOfInterestID = ?;
    """;
        try (Connection conn = SQLiteConnector.connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, title);
            pstmt.setString(2, description);
            pstmt.setBoolean(3, isOwnedByInstitution);
            pstmt.setBoolean(4, canBeAuctioned);
            pstmt.setString(5, objectType);
            pstmt.setInt(6, objectID);
            pstmt.executeUpdate();
            System.out.println("‚úÖ Object updated successfully!");

        } catch (SQLException e) {
            System.out.println("‚ùå Failed to update object: " + e.getMessage());
        }
    }
}
